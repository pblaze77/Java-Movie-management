/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import com.microsoft.sqlserver.jdbc.StringUtils;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MovieTable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Paulo
 */
public class JPanelCRUDMovies extends javax.swing.JPanel {
    private static final String CRUD_MOVIES = "CRUD movies";
  
    private Map<JTextComponent, JLabel> validationMap = new HashMap<>();
    private Repository repository;

    private MovieTable movieTableModel;

    private Movie selectedMovie;

    private List<Person> actors;
    private List<Person> directors;
    private Set<Person> cast = new HashSet<>();

    private final DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> directorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> castModel = new DefaultListModel<>();

    private static final String DIRECTORY = "assets";
    /**
     * Creates new form JPanel_CRUDMovies
     */
    public JPanelCRUDMovies() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        lbPubDate = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        tfPubDate = new javax.swing.JTextField();
        lbDuration = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDesc = new javax.swing.JTextArea();
        lbPubDateError = new javax.swing.JLabel();
        lbTitleError = new javax.swing.JLabel();
        lbDescError = new javax.swing.JLabel();
        lbDesc = new javax.swing.JLabel();
        lbYear = new javax.swing.JLabel();
        tfYear = new javax.swing.JTextField();
        tfDuration = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClearAll = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lbDurationError = new javax.swing.JLabel();
        lbYearError = new javax.swing.JLabel();
        lbImage = new javax.swing.JLabel();
        tfImagePath = new javax.swing.JTextField();
        btnChooseImage = new javax.swing.JButton();
        lbImageError = new javax.swing.JLabel();
        lbCastError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsCast = new javax.swing.JList<>();
        btnDeleteCurrentCast = new javax.swing.JButton();
        lbActors = new javax.swing.JLabel();
        lbDirectors = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbTitle.setText("Title");

        lbPubDate.setText("Published date");

        lbDuration.setText("Duration");

        taDesc.setColumns(20);
        taDesc.setRows(5);
        jScrollPane1.setViewportView(taDesc);

        lbPubDateError.setForeground(new java.awt.Color(255, 0, 0));
        lbPubDateError.setText("X");

        lbTitleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTitleError.setText("X");

        lbDescError.setForeground(new java.awt.Color(255, 0, 0));
        lbDescError.setText("X");

        lbDesc.setText("Description");

        lbYear.setText("Year");

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClearAll.setText("Clear ALL");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lbDurationError.setForeground(new java.awt.Color(255, 0, 0));
        lbDurationError.setText("X");

        lbYearError.setForeground(new java.awt.Color(255, 0, 0));
        lbYearError.setText("X");

        lbImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.jpeg"))); // NOI18N

        btnChooseImage.setText("Choose");
        btnChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageActionPerformed(evt);
            }
        });

        lbImageError.setForeground(new java.awt.Color(255, 0, 0));
        lbImageError.setText("X");

        lbCastError.setForeground(new java.awt.Color(255, 51, 51));
        lbCastError.setText("X");

        jScrollPane2.setViewportView(lsCast);

        btnDeleteCurrentCast.setText("Delete cast");
        btnDeleteCurrentCast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCurrentCastActionPerformed(evt);
            }
        });

        lbActors.setText("Actors ");

        lbDirectors.setText("Directors");

        jScrollPane3.setViewportView(lsDirectors);

        jScrollPane4.setViewportView(lsActors);

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbMoviesMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tbMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(467, 467, 467)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteCurrentCast)
                            .addComponent(lbCastError, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(lbDesc)))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(lbTitle)
                            .addGap(67, 67, 67)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbPubDateError)
                                .addComponent(lbTitleError)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnUpdate)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lbYear)
                                        .addComponent(btnAdd)
                                        .addComponent(btnDelete))
                                    .addGap(118, 118, 118)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(73, 73, 73)
                                            .addComponent(btnChooseImage))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lbImageError))))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(111, 111, 111)
                                            .addComponent(btnClearAll))
                                        .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(15, 15, 15)
                                    .addComponent(lbYearError))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbDurationError))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addComponent(lbPubDate)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDuration)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(lbDescError)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbActors, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(213, 213, 213)
                        .addComponent(lbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(198, 198, 198))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTitle)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbPubDate)
                            .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPubDateError)
                            .addComponent(lbActors)
                            .addComponent(lbDirectors))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(lbDesc)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnDeleteCurrentCast)
                                                .addGap(18, 18, 18)
                                                .addComponent(lbCastError)
                                                .addGap(108, 108, 108))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(118, 118, 118))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(81, 81, 81)
                                        .addComponent(lbDescError))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lbDuration)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDurationError))
                        .addGap(30, 30, 30)
                        .addComponent(lbYear)
                        .addGap(102, 102, 102)
                        .addComponent(btnAdd)
                        .addGap(33, 33, 33)
                        .addComponent(btnDelete)
                        .addGap(41, 41, 41)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClearAll)
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbYearError)
                                    .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(209, 209, 209))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbImageError)
                                .addGap(166, 166, 166)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChooseImage))
                        .addGap(70, 70, 70))))
        );
    }// </editor-fold>//GEN-END:initComponents

            
  
    
    
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
        clearForm();
    }//GEN-LAST:event_formComponentShown

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
         if (!formValid()) {
            return;
        }
        addMovie();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
          if (selectedMovie == null) {
            MessageUtils.showErrorMessage(CRUD_MOVIES, "Error, you have to choose a movie!");
            return;
        }

        if (!formValid()) {
            return;
        }

        try {
            deleteMovie();
        } catch (Exception ex) {
            Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils
                    .showErrorMessage
        (CRUD_MOVIES, "Error, you have to choose a movie!");
            return;
        }

        if (!formValid()) {
            return;
        }

        updateMovie();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
       clearForm();
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void btnChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageActionPerformed
    
Optional<File> optFile = FileUtils.uploadFile("Images", "png", "jpg", "jpeg");


if (!optFile.isPresent()) {
    return; 
}
File file = optFile.get();

tfImagePath.setText(file.getAbsolutePath());

setIcon(lbImage, file);

    }//GEN-LAST:event_btnChooseImageActionPerformed

    private void btnDeleteCurrentCastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCurrentCastActionPerformed
   try {
    
    if (castModel.size() == 0) {
        MessageUtils
      .showErrorMessage
        (CRUD_MOVIES, "Error, there is no cast to delete!");
        return; 
    }
    if (selectedMovie != null) {
        int movieId = selectedMovie.getId(); 
        cast = repository.selectCast(movieId); 

        if (!cast.isEmpty()) {
            repository.deleteCast(movieId);
        }
    }

    clearCast();
} catch (Exception e) {
   
    Logger.getLogger(JPanelCRUDMovies.class.getName()).log
        (Level.SEVERE, "Error while deleting cast", e);
}
    }//GEN-LAST:event_btnDeleteCurrentCastActionPerformed

    private void tbMoviesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseReleased
       showMovie();
    }//GEN-LAST:event_tbMoviesMouseReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChooseImage;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCurrentCast;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbActors;
    private javax.swing.JLabel lbCastError;
    private javax.swing.JLabel lbDesc;
    private javax.swing.JLabel lbDescError;
    private javax.swing.JLabel lbDirectors;
    private javax.swing.JLabel lbDuration;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbImage;
    private javax.swing.JLabel lbImageError;
    private javax.swing.JLabel lbPubDate;
    private javax.swing.JLabel lbPubDateError;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JLabel lbYear;
    private javax.swing.JLabel lbYearError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsCast;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JTextArea taDesc;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfImagePath;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfYear;
    // End of variables declaration//GEN-END:variables
 
    
    private boolean formValid() {
          hideErrors();
        boolean ok = true;

        for (Map.Entry<JTextComponent, JLabel> map : validationMap.entrySet()) {
            JTextComponent field = map.getKey();
            JLabel error = map.getValue();

            boolean fieldEmpty = field.getText().trim().isEmpty();
            ok &= !fieldEmpty;
            error.setVisible(fieldEmpty);

            if ("Date".equals(field.getName())) {
                try {
                    LocalDateTime.parse(field.getText().trim(), Movie.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    error.setVisible(true);
                }
            }
        }

        if (lsCast.getModel().getSize() == 0) {
            lbCastError.setVisible(true);
            ok = false;
        }

        if (!StringUtils.isNumeric(tfDuration.getText())) {
            lbDurationError.setVisible(true);
            ok = false;
        }

        if (!StringUtils.isNumeric(tfYear.getText())) {
            lbYearError.setVisible(true);
            ok = false;
        }

        return ok;
    }

    private void addMovie() {
         try {
            String localPicPath = uploadPicture();
            Movie movie;
             movie = new Movie(
                     tfTitle.
                             getText().
                             trim(),
                     LocalDateTime.parse(
                             tfPubDate.
                                     getText().
                                     trim(),
                             Movie.DATE_FORMATTER
                     ),
                     taDesc.
                             getText().
                             trim(),
                     localPicPath,
                     Integer.parseInt(tfDuration.getText().trim()),
                     Integer.parseInt(tfYear.getText().trim())
             );

            int createdMovie = repository.createMovie(movie);

            if (createdMovie > 0) {
                MessageUtils.showInformationMessage
        (CRUD_MOVIES, "Movie has been successfully created!");
            } else {
                MessageUtils.showErrorMessage
        (CRUD_MOVIES, "An error occurred while trying to create a movie!");
            }

            movieTableModel.setMovies(repository.selectMovies());
            clearForm();

        } catch (Exception ex) {
            Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void hideErrors() 
    {
        validationMap.forEach((field, error) -> error.setVisible(false));
        lbCastError.setVisible(false);
    }

    private String uploadPicture() throws IOException {
         String picturePath = tfImagePath.getText();

        String ext;
        ext = picturePath.substring(
                picturePath.lastIndexOf("."));

        String pictureName = UUID.randomUUID() + ext;

        String localPath = DIRECTORY + File.separator + pictureName;
        FileUtils.copy(picturePath, localPath);

        return localPath;
    }

    private void clearForm() {
         hideErrors();
        validationMap.forEach((field, error) -> field.setText(""));
        lbImage.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/assets/no_image.jpeg"))); 
        clearCast();
        selectedMovie = null;
    }

    private void clearCast() {
        castModel.clear();
        cast.clear();
    }

    private void init() {
        initValidation();
        initRepository();
        hideErrors();
        loadLists();
        initTable();
        initDND();
    }

    private void initValidation() {
        validationMap.put(tfTitle, lbTitleError);
        validationMap.put(tfPubDate, lbPubDateError);
        validationMap.put(taDesc, lbDescError);
        validationMap.put(tfDuration, lbDurationError);
        validationMap.put(tfYear, lbYearError);
        validationMap.put(tfImagePath, lbImageError);
    }

    private void initRepository() {
         repository = RepositoryFactory.getRepository();
    }

    private void loadLists() {
          loadActors();
        loadDirectors();
    }

    private void initTable() {
        try {
   
    tbMovies.setRowHeight(25);

    tbMovies.setAutoCreateRowSorter(true);
    tbMovies.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

   
    movieTableModel = new MovieTable(repository.selectMovies());
    tbMovies.setModel(movieTableModel);
} catch (Exception ex) {
   
    Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
}
    }

    private void showMovie() {
         try {
            clearForm();

            int selectedRow = tbMovies.getSelectedRow();
            int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
            int movieId = (int) movieTableModel.getValueAt(rowIndex, 0);

            Optional<Movie> optMovie = repository.selectMovie(movieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
                fillLsCast(movieId);
            }
        } catch (Exception ex) {
            Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillForm(Movie selectedMovie) {
        tfTitle.setText(selectedMovie.getTitle());
        tfPubDate.setText(selectedMovie.getPublishedDate()
                .format(Movie.DATE_FORMATTER));

        taDesc.setText(selectedMovie.getDescription());
        tfDuration.setText(String.valueOf(selectedMovie.getDuration()));
        tfYear.setText(String.valueOf(selectedMovie.getYear()));

        if (selectedMovie.getPicturePath() != null && Files.exists(Paths.get(selectedMovie.getPicturePath()))) {
            tfImagePath.setText(selectedMovie.getPicturePath());
            setIcon(lbImage, new File(selectedMovie.getPicturePath()));
        }
    }

    private void fillLsCast(int movieId) throws Exception {
         cast = repository.selectCast(movieId);
        loadCastModel();
    }

    private void loadCastModel() {
         castModel.clear();

        cast.forEach(castModel::addElement);
        lsCast.setModel(castModel);
    }

    private void setIcon(JLabel lbImage, File file) {
         try {
            lbImage.setIcon(IconUtils.createIcon(file, lbImage.getWidth(), lbImage.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage(CRUD_MOVIES, "An error occurred while setting image!");
        }
    }

    private void deleteMovie() throws Exception {
      
if (MessageUtils.showConfirmDialog
        ("Movie deletion", "Are you sure you want to delete this movie?")) {
   
    if (selectedMovie.getPicturePath() != null) {
        try {
          
            Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
           
            repository.deleteCast(selectedMovie.getId());
            
            repository.deleteMovie(selectedMovie.getId());

            movieTableModel.setMovies(repository.selectMovies());

          
            clearForm();
        } catch (IOException ex) {
        
           Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
    }

    private void updateMovie() {
       try {
            if (!tfImagePath.getText().equals(selectedMovie.getPicturePath())) {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(
                            Paths.get(selectedMovie.getPicturePath())
                    );
                }
                String picturePath = uploadPicture();
                selectedMovie.setPicturePath(picturePath);
            }

            selectedMovie.setTitle(tfTitle.getText().trim());

            selectedMovie.setPublishedDate(LocalDateTime.parse(
                    tfPubDate.getText().trim(),
                    Movie.DATE_FORMATTER));

            selectedMovie.setDescription(taDesc.getText().trim());

            selectedMovie.setDuration(
                    Integer.parseInt(tfDuration.getText().trim()));

            selectedMovie.setYear(
                    Integer.parseInt(tfYear.getText().trim()));

            repository.updateMovie(selectedMovie.getId(), selectedMovie);
            movieTableModel.setMovies(repository.selectMovies());

            updateCast();

            clearForm();
            MessageUtils
                    .showInformationMessage
        (CRUD_MOVIES, "Movie has been succesfully updated!");
        } catch (Exception ex) {
            Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils
                    .showErrorMessage
        (CRUD_MOVIES, "An error occurred while updating movie!");
        }
    }

    private void updateCast() throws Exception {
    repository.deleteCast(selectedMovie.getId());
    repository.createCast(selectedMovie.getId(), cast);
  
    }
 private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOUR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            try {
                Transferable transferable = support.getTransferable();

                Person person = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOUR);

                if (cast.add(person)) {
                    loadCastModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

        private void loadCastModel() {
        castModel.clear();
        cast.forEach(castModel::addElement);
        lsCast.setModel(castModel);
        }

    }
    private void initDND() {
         dndActors();
        dndDirectors();

        lsCast.setDropMode(DropMode.ON);
        lsCast.setTransferHandler(new ImportHandler());
    }

    private void loadActors() {
         try {
            actorsModel.clear();

            actors = repository.selectActors();

            actors.forEach(actor -> {
                actorsModel.addElement(actor);
             });

            lsActors.setModel(actorsModel);
        } catch (Exception ex) {
            Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadDirectors() {
      
    try {
            directorsModel.clear();

            directors = repository.selectDirectors();

            directors.forEach(director -> {
                directorsModel.addElement(director);
        });

         lsDirectors.setModel(directorsModel);
        } catch (Exception ex) {
            Logger.getLogger(JPanelCRUDMovies.class.getName()).log(Level.SEVERE, null, ex);
        }
   
    }
private class ExportActorsHandler extends TransferHandler {

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsActors.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

    }
    private void dndActors() {
        lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsActors.setDragEnabled(true);
        lsActors.setTransferHandler(new ExportActorsHandler());
    }
 private class ExportDirectorsHandler extends TransferHandler {

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsDirectors.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

    }
    private void dndDirectors() {
        lsDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsDirectors.setDragEnabled(true);
        lsDirectors.setTransferHandler(new ExportDirectorsHandler());
    }
}
